defineconstant,begin
	0, emote:shrug
end

script, titlescreen, begin
	variable (height, sli, sli2, i, j, set1, set2, blend1, blend2, opacity1, opacity2)
	play song (0)

	set slice visible (getherosprite(me), false)
	sli := createContainer(426,240)
	height := slice height (sli)

	set slice clipping (sli, true)
	set slice lookup(sli, sli:battleback)

	set1 := 15, set2 := 14
	opacity1 := 60
	opacity2 := 60
	blend1 := blend:normal
	blend2 := blend:normal
	for (j, 0, 1) do (
		sli := create container ()
		set parent(sli, lookupslice(sli:battleback))

		for (i, 0, height--1) do (
			sli := create container(500, 1)
			put slice (sli, 0, i) 
			set parent (sli, last child (lookupslice(sli:battleback)))
			set slice clipping (sli, true)

			if (j == 0) then (
				sli2 := load backdrop sprite (set1)
				set blend mode (sli2, blend1)
				set opacity (sli2, opacity1)

			) else (
				sli2 := load backdrop sprite (set2)
				set blend mode (sli2, blend2)
				set opacity (sli2, opacity2)
			)

			set parent (sli2, sli)
			put slice (sli2, 0, i * -1)	
		)
	)
	sli := load attack sprite (4)
	set parent (sli, lookupslice(sl:maplayer3))
	set slice lookup (sli, sli:titlecheck)

	put slice (sli, 9*20, 11*20)
	open menu (3)
	while (topmenu<>false) do (
		specwait()
	)
	screenfadeout
	sli := loadbackdropsprite(16)
	dissolveSprite (sli, dissolve:fade, 30, 0, true)
	specwait(20)
	state:control := state:title
	while (state:control == state:title) do (
		specwait()
	)
	dissolveSprite (sli, dissolve:fade, 30, 0)
	specwait(20)
	free slice (sli)
	free slice (lookupslice (sli:titlecheck))
	free slice (lookupslice(sli:battleback))
	suspendcontrol

	sli := createContainer(426,240)
	height := slice height (sli)

	set slice clipping (sli, true)
	set slice lookup(sli, sli:battleback)
	slice to back (sli)

	set1 := 17, set2 := 18
	opacity1 := 60
	opacity2 := 60
	blend1 := blend:normal
	blend2 := blend:normal
	for (j, 0, 1) do (
		sli := create container ()
		set parent(sli, lookupslice(sli:battleback))

		for (i, 0, height--1) do (
			sli := create container(500, 1)
			put slice (sli, 0, i) 
			set parent (sli, last child (lookupslice(sli:battleback)))
			set slice clipping (sli, true)

			if (j == 0) then (
				sli2 := load backdrop sprite (set1)
				set blend mode (sli2, blend1)
				set opacity (sli2, opacity1)

			) else (
				sli2 := load backdrop sprite (set2)
				set blend mode (sli2, blend2)
				set opacity (sli2, opacity2)
			)

			set parent (sli2, sli)
			put slice (sli2, 0, i * -1)	
		)
	)
	sli := load attack sprite (4)
	set parent (sli, lookupslice(sl:maplayer3))
	set slice lookup (sli, sli:titlecheck)

	put slice (sli, 9*20, 11*20)
	screenfadein()
	for (i, 18, 23) do (write(i))
	specwait(20)
	suspendcontrol
	screenfadeout()
	fadeMusicOut
	free slice (lookupslice (sli:titlecheck))
	free slice (lookupslice(sli:battleback))
	set slice visible (getherosprite(me), true)
	set hero position (me, 10, 10)
	screenfadein()
	suspendcontrol

	play song (get ambient music)
end

script, titleupdate, begin
	variable (sli)
	sli := lookupslice (sli:titlecheck)
	if (game:tick,mod,20==1) then (
		if (get sprite frame (sli)>=2) then (
			set sprite frame (sli, 0)
		) else (set sprite frame (sli, get sprite frame (sli)+1))
	)
	sinedist(999)
end


plotscript, loadgame, begin
	load from slot(1)
end
plotscript, loadgament, begin
	openmenu(5)
end

plotscript, savegame, begin
	if (save slot used (1)) then (
		open menu(4)
	) else (save in slot(1), play sound (7))
end
plotscript, savegameconfirm, begin
	save in slot(1)
	play sound (7)
end

script, emote, who, which, begin
	variable (sli, i)
	suspendControl
	specwait (10)
	switch (which) do (
	case (emote:shrug) do (
		setHeroPicture (who,3)
		for (i, 0, 6) do (
			set hero direction (who,i,mod,2)
			specwait(10)
		)
		specwait (6)
		setHeroPicture (who,1)
		set hero direction (who,down)
	)
	)
	resumeControl
	specwait (10)
end

plotscript, events, which, begin
	suspendcontrol
	switch (currentmap) do (
		case (2) do (eventsattic(which))
	)
	resumecontrol
end

script, eventsattic, which, begin
	variable (i, var, who, sli, sli2, sli3, sli4)
	switch (which) do (
		case (0) do (
			if (check tag (tag:MirrorCheck)==on) then (
				write (2)
				write (13, 0, 2)
				if (checktag(tag:YesNo)==off) then (
					exit script
				)
				setTag(tag:YesNo,off)
				for (i, 1, 10) do (
					if (i <= 5) then (set hero frame (me, 1))
					setHeroZ (me, heroZ (me)+1)
					if (i > 5) then (set hero frame (me, 0))
					specwait(1)
				)
				specwait(20)
				set hero picture (me, 4)
				specwait (20)
				set hero frame (me, 0)
				specwait (20)
				set hero frame (me, 1)
				specwait(20)
				set hero picture (me, 1)
				specwait(20)
				for (i, 1, 10) do (
					if (i <= 5) then (set hero frame (me, 1))
					setHeroZ (me, heroZ (me)--1)
					if (i > 5) then (set hero frame (me, 0))
					specwait(1)
				)

				suspendcontrol
				specwait(60)
				sli := load attack sprite(0)
				center slice (sli)
				put slice (sli, 0, -20)
				for (i,0,2) do (
					setSpriteFrame (sli, i)
					specwait(8)
				)
				free slice (sli)
				fadeMusicOut()
				play song (11)
				specwait (240)
				sli := load attack sprite(1)
				sli2 := load attack sprite(2)
				set parent(sli, parent slice (getherosprite(me)))
				slice to back (sli)
				set parent(sli2,parent slice (getherosprite(me)))
				set slice visible (getherosprite(me), false)
				sli4 := create container (20, 36)
				set parent (sli4, sli)
				sli3 := loadWalkaboutSprite(get hero picture(me))
				set parent (sli3, sli4)
				realign slice (sli4, edge:center, edge:bottom, edge:center, edge:bottom)
				realign slice (sli3, edge:center, edge:bottom, edge:center, edge:bottom)
				realign slice (sli, edge:center, edge:bottom, edge:center, edge:bottom)
				realign slice (sli2, edge:center, edge:bottom, edge:center, edge:bottom)
				set slice clipping (sli4, true)
				dissolve sprite (sli, dissolve:shrink to center, 100, 10, true)
				dissolve sprite (sli2, dissolve:shrink to center, 100, 10, true)

				for (i, 1, 80) do (
					if (game:tick,mod,4==1) then (wildpal(4))
					set sprite frame (sli, (i/2),mod,2)
					set sprite frame (sli2, (i/2),mod,2)
					specwait(2)
				)
				for (i, 1,80) do (

					if (game:tick,mod,4==1) then (wildpal(4))
					specwait (2)
					set sprite frame (sli3,4)
					setSlicey (sli3, i * -2)
					set sprite frame (sli, (i/2),mod,2)
					set sprite frame (sli2, (i/2),mod,2)
				)
				
				
				dissolve sprite (sli, dissolve:shrink to center, 30, 0)
				dissolve sprite (sli2, dissolve:shrink to center, 30, 0)
				for (i, 1, 10) do (
					if (game:tick,mod,4==1) then (wildpal(4))
					set sprite frame (sli, (i/2),mod,2)
					set sprite frame (sli2, (i/2),mod,2)
					specwait(2)
				)
				free slice (sli)
				free slice (sli2)
				for (i,0,30) do (
					if (game:tick,mod,4==1) then (wildpal(4))
					specwait
				)
				reset palette
				update palette
				

				#note: evil reflection here
				set tag (tag:Mirror Person, on)
				who := npcReference(5)
				sli := getNpcSprite(who)
				set slice visible (sli, false)
				specwait(100)
				set slice visible (sli, true)
				dissolveSprite (sli, dissolve:ghostly fade, 140, 0, true)
				specwait(130)
				set slice visible (slice child (lookupslice(sli:mirrorheroes), 0), false)
				set NPC ignores walls (who, true)
				set NPC obstructs (who, false)
				pathfind NPC to (who,11,8)
				while(NPC is walking (who)) do (specwait)
				set NPC frame(who, 0)
				set NPCDirection(who, right)
				specwait(40)
				set NPCDirection(who, down)
				specwait(40)
				set NPCDirection(who, left)
				specwait(40)
				set NPCDirection(who, down)
				specwait(90)
				set NPC ignores walls (who, false)
				set NPC obstructs (who, true)
				pathfind NPC to (who,15,15)

				while(NPC is walking (who)) do (specwait)

				screenfadeout
				fade music out(20)
				set slice visible (getherosprite(me), true)
				teleporttomap(3, 20, 75)
				specwait(40)
				screenfadein
			)else (
				who := NPC reference (0)
				set NPC frame(who, 1), specwait(5)
				set NPC frame(who, 0)
				for (i, 1, 3) do (
					set npc direction(who,i)
					specwait(15)
				)
				specwait(60)
				write (6)
				set tag (tag:MirrorCheck, on)
			)
		)
		case (1) do (
			emote(me, emote:shrug)
			specwait(10)
			write(3)
		)
	)
end