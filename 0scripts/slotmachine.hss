define constant, begin
	0, slottop
	-35, slotcenter
	-1040, slotbottom
	12, spinrate
	60, slotsize
end

plotscript, slotmachine, begin
# variables
	variable (i, sli, check)
	
	# init
	screenfadeout()
	loadSliceCollection(1)
	for (i,0,2) do (
		sli := firstchild (slicechild (firstchild (lookupslice (sli:slot)), i))
		set slice y (sli, slotcenter)
		set slice extra(sli, 0, 1)
	)
	screenfadein()
	suspendcontrol
	
	state:control := state:slots

	#main part of spinny
	slotmain
end


plotscript, slotmain, begin
# variables
	variable (i, sli, check)
# main
	while (true) do (
		check := 0
		check := spin
		if (check == 0) then (break)
		specwait
	)
	slotwincheck
	slotend
	
# subscript to spin slots
	subscript, spin, begin
        for (i, 0, 2) do (
        	sli := firstchild (slicechild (firstchild (lookupslice (sli:slot)), i))
            if (get slice extra (sli, 0)==1 && lookupslice (sli:slot)) then (
                set slice y (sli, slicey(sli)+spinrate)
                if (slice y(sli)>slottop) then (set slice y (sli, slotbottom))
                return  (1)
            )
        )
	end
end

# calculate victory
script, slotwincheck, begin
	variable (i, sli, sli2, temp)
	
	sli2 := initArray(3)
	
	for (i, 0, 2) do (
		sli := slicechild (firstchild (lookupslice (sli:slot)), i)
		temp := get sprite frame(slice at pixel(sli,(i+1)*100,120))
		setElement(sli2,i,temp)
	)
	$3 = ""
	if (getElement(sli2,0) == getElement(sli2,1) && getElement(sli2,1) == getElement(sli2,2)) then (
		# item ID is derived from sprite frame no.
		# make sure there are enough valid items
		# ID range: 0~15
		get item name(3,temp)
	)
end

script, slotend, begin
# variables
	variable (i, sli, check)
	# finish
	screenfadeout()
	freeSlice (lookup slice(sli:slot))
	screenfadein()
	if (string length(3) <> 0) then (write(8))
	else (write(9))
end

# input
script, keypressSlots, begin
	variable (i, sli)
	if (newkeypressA && lookup slice(sli:slot)) then (
		for (i,0,2) do (
			sli := firstchild (slicechild (firstchild (lookupslice (sli:slot)), i))
			if (get slice extra (sli,0)==1) then (
				set slice extra (sli, 0, 0)
				# snap to nearest multiple of slotsize
				set slice y (sli, (slice y(sli)/slotsize)*slotsize+slotcenter)
				break
			)
		)
	)
end