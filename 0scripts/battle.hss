plotscript, battle, formation, begin
	variable (i, sli, battlecheck)
	specwait (10)
	#start battle
	innitbattle(formation)

	while (true) do (
		battlecheck :=battleturn()
		battlecheck :=battleaction()
		specwait(6)
		if (battlecheck <> true) then (break)
	)

	#clean up slices and exit script
	fadescreenout()
	suspendcontrol
	free slice (lookupslice(sli:battleCol))
	stat:battle := false
	specwait(20)
	fadescreenin()
	resumecontrol
	
	
	subscript, battleturn, begin
		while (true) do (
			while (true) do (
				if (new key press(anykey)) then (break)
				specwait()
			)
			if (newkeypress(key:esc)) then (specwait(8), exitReturning(false))
			
			specwait()
		)
	end

	subscript, battleaction, begin
		exitReturning(false)
	end
end

script, innitbattle, formation, begin
	variable (i, sli)
	suspendcontrol
	fadescreenout()
	loadslicecollection(0)
	loadbattleback(formation)
	specwait(20)
	stat:battle := true
	fadescreenin()
end

script, battleupdate, time=1, begin
	variable (i, sli)
	sinedist()
	sli := lookupslice(sli:enemySprite)
	if (game:tick,mod,10==0) then (
		if (get sprite frame (sli)==sprite frame count(sli)--1) then (set sprite frame (sli, 0)) else(
			set sprite frame (sli, get sprite frame(sli)+1)
		)
	)
end

script, loadbattleback, formation, begin
	variable (height, sli, sli2, i, j, set1, set2, blend1, blend2, opacity1, opacity2)
	sli := load backdrop sprite (0)
	height := slice height (sli)

	set slice clipping (sli, true)
	set slice lookup(sli, sli:battleback)
	set parent(sli, lookupslice(sli:battleCol))
	slice to back (sli)

	switch (formation)do(
		case (0) do (
			set1 := 4, set2 := 4
		)
		case (1) do (
			set1 := 1, set2 := 1
		) else (
			set1 := 1, set2 := 1
		)
	)
		blend1 := blend:normal
		blend2 := blend:normal
		opacity1 := 100
		opacity2 := 100
	for (j, 0, 1) do (
		sli := create container ()
		set parent(sli, lookupslice(sli:battleback))

		for (i, 0, height--1) do (
			sli := create container(500, 1)
			put slice (sli, 0, i) 
			set parent (sli, last child (lookupslice(sli:battleback)))
			set slice clipping (sli, true)

			if (j == 0) then (
				sli2 := load backdrop sprite (set1)
				set blend mode (sli2, blend1)
				set opacity (sli2, opacity1)

			) else (
				sli2 := load backdrop sprite (set2)
				set blend mode (sli2, blend2)
				set opacity (sli2, opacity2)
			)

			set parent (sli2, sli)
			put slice (sli2, 0, i * -1)	
		)
	)
end

script, sinedist, begin
	variable (i, j, sli, offset, newX, x, y, t,  formation, height)
	variable (amplitude, frequency, timeScaling, mode, compression)

	#formation := getElement(get array(array:battleinfo), battle:formation)

	sli := slice child (first child (first child (lookupslice(sli:battleback))))

	height := slice height (sli)

	for (j, 0, 1) do (

		if (j == 0) then (
			switch (formation) do (
				case (0) do (
					amplitude := 38, frequency := 10, compression := 2
					timeScaling := 200, mode := 3
				)
				case (1) do (
					amplitude := 2, frequency := 8, compression := 3
					timeScaling := 30, mode := 1
				) else (
					amplitude := 4, frequency := 20, compression := 1
					timeScaling := 20, mode := 3
				)
			)
		) else (
			switch (formation) do (

				case (0) do (
					amplitude := -30, frequency := 10, compression := 1
					timeScaling := 100, mode := 2
				)
				case (1) do (
					amplitude := 4, frequency := 20, compression := 1
					timeScaling := 20, mode := 3
				) else (
					amplitude := 4, frequency := 20, compression := 1
					timeScaling := 20, mode := 3
				)
			)
		)

		t := get slice extra (first child (lookupslice(sli:battleback)), 0)
		if (timeScaling == 0) then (timeScaling := 1)
		t := (t * 80)/timeScaling

		for (i, 0, height--1) do (
			x := 0
			sli := first child (slice child (slice child (lookupslice(sli:battleback), j), i))
			
			offset := sine ((frequency*i)/2 + t) * amplitude/6000
			
			if (mode == 1) then(
				x := offset
				put slice (sli, x, i * -1)
			) else if (mode == 2) then (
				if (i, mod, 2) then (offset := offset * -1) else ()
				x := offset
				put slice (sli, x, i * -1)
			) else if (mode == 3) then (
				y := i * compression + offset

				y := (y + height), mod, height

				put slice (sli, x, y * -1) 
			)
		)
		
	)
	
	
	t := get slice extra (first child (lookupslice(sli:battleback)), 0)
	t += 1
	set slice extra (first child (lookupslice(sli:battleback)), 0, t)
end